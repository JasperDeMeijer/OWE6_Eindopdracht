/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package owe6_eindopdracht;

import java.awt.Color;
import java.awt.Graphics;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author jdm
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonOpen = new javax.swing.JButton();
        jButtonBlader = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanelVenn = new javax.swing.JPanel();
        jLabelUniek1 = new javax.swing.JLabel();
        jLabelOverlap = new javax.swing.JLabel();
        jLabelUniek2 = new javax.swing.JLabel();
        jButtonExportGenes = new javax.swing.JButton();
        jButtonExportPubMed = new javax.swing.JButton();
        jPanelStats = new javax.swing.JPanel();
        jLabelTaxID1 = new javax.swing.JLabel();
        jLabelTaxID2 = new javax.swing.JLabel();
        jLabelAmountOfInteractions = new javax.swing.JLabel();
        jLabelUniqueInteractions = new javax.swing.JLabel();
        jLabelUniqueInteractionsAmount = new javax.swing.JLabel();
        jLabelTotalInteractionsAmount = new javax.swing.JLabel();
        jLabelTaxID2Amount = new javax.swing.JLabel();
        jLabelTaxID1Amount = new javax.swing.JLabel();
        jButtonAnalyze = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Bestand:");

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonBlader.setText("Blader");
        jButtonBlader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBladerActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Interaction" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Interaction" }));

        jPanelVenn.setBackground(new java.awt.Color(152, 152, 152));
        jPanelVenn.setForeground(new java.awt.Color(35, 23, 23));

        javax.swing.GroupLayout jPanelVennLayout = new javax.swing.GroupLayout(jPanelVenn);
        jPanelVenn.setLayout(jPanelVennLayout);
        jPanelVennLayout.setHorizontalGroup(
            jPanelVennLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVennLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabelUniek1)
                .addGap(87, 87, 87)
                .addComponent(jLabelOverlap)
                .addGap(86, 86, 86)
                .addComponent(jLabelUniek2)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanelVennLayout.setVerticalGroup(
            jPanelVennLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVennLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jPanelVennLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUniek1)
                    .addComponent(jLabelOverlap)
                    .addComponent(jLabelUniek2))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        jButtonExportGenes.setText("Export Genes");
        jButtonExportGenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportGenesActionPerformed(evt);
            }
        });

        jButtonExportPubMed.setText("Export PubMed ");
        jButtonExportPubMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportPubMedActionPerformed(evt);
            }
        });

        jPanelStats.setBackground(new java.awt.Color(152, 152, 152));

        jLabelTaxID1.setText("Tax ID 1:");

        jLabelTaxID2.setText("Tax ID 2:");

        jLabelAmountOfInteractions.setText("Amount of Interactions:");

        jLabelUniqueInteractions.setText("Unique interactions:");

        jLabelUniqueInteractionsAmount.setText("#");

        jLabelTotalInteractionsAmount.setText("#");

        jLabelTaxID2Amount.setText("#");

        jLabelTaxID1Amount.setText("#");

        javax.swing.GroupLayout jPanelStatsLayout = new javax.swing.GroupLayout(jPanelStats);
        jPanelStats.setLayout(jPanelStatsLayout);
        jPanelStatsLayout.setHorizontalGroup(
            jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelUniqueInteractions)
                    .addComponent(jLabelAmountOfInteractions)
                    .addComponent(jLabelTaxID2)
                    .addComponent(jLabelTaxID1))
                .addGap(52, 52, 52)
                .addGroup(jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTaxID1Amount)
                    .addComponent(jLabelTaxID2Amount)
                    .addComponent(jLabelTotalInteractionsAmount)
                    .addComponent(jLabelUniqueInteractionsAmount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelStatsLayout.setVerticalGroup(
            jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTaxID1)
                    .addComponent(jLabelTaxID1Amount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTaxID2)
                    .addComponent(jLabelTaxID2Amount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelTotalInteractionsAmount)
                    .addComponent(jLabelAmountOfInteractions, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUniqueInteractions)
                    .addComponent(jLabelUniqueInteractionsAmount))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jButtonAnalyze.setText("Analyze");
        jButtonAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnalyzeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, 0, 294, Short.MAX_VALUE))
                    .addComponent(jTextField1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelVenn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAnalyze, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExportGenes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExportPubMed, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOpen)
                .addGap(18, 18, 18)
                .addComponent(jButtonBlader)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonOpen)
                    .addComponent(jButtonBlader))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAnalyze)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExportGenes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExportPubMed))
                    .addComponent(jPanelVenn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jButtonOpen.getAccessibleContext().setAccessibleName("jOpen");
        jButtonOpen.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        //The path selected or entered in the pathway textfield is used and the file will be opened. 
        //All the lines except for the header will be returned
        input = new FileProcessing();
        ArrayList<String> linesTemporary;
        linesTemporary = input.FileRead(jTextField1.getText());
        Gene resetCounter = new Gene();
        resetCounter.CounterReset();

        //Creating an Arraylist of gene objects with the temporary lines splitted on tab indentation.
        //the list of genes will be cleared. Incase of the user pressing the open button several times 
        geneList.clear();
        //for everyline in the file except the header a gene object is created.
        for (String line : linesTemporary) {
            String[] lineSplit = line.split("\t");
            int taxID1 = Integer.parseInt(lineSplit[0]);
            geneList.add(new Gene(Integer.parseInt(lineSplit[0]), Integer.parseInt(lineSplit[1]), lineSplit[2], lineSplit[3], lineSplit[4],
                    Integer.parseInt(lineSplit[5]), Integer.parseInt(lineSplit[6]), lineSplit[7], lineSplit[8], lineSplit[9],
                    lineSplit[10], lineSplit[11]));
        }

        //Retrieving a set of unique interactions. 
        Interactions uniqueSetInstance = new Interactions();
        Set<String> uniqueList = new HashSet<>();
        uniqueList = uniqueSetInstance.uniqueInteractions(geneList);

        //Retrieving statistics based on the file
        Statistics stat1 = new Statistics();
        int amountGeneIDs1 = stat1.CountUniqueGeneIDs1(geneList);
        int amountGeneIDs2 = stat1.CountUniqueGeneIDs2(geneList);
        int uniqueInteractions = stat1.CountUniqueInteractions(geneList);
        //For the amount of interactions a static counter in class Gene is used.
        int amountOfInteractions = Gene.getCounter();

        //Adding the statistics to the corresponding labels(When the open button is pressed, the statistics will be shown in the GUI)
        jLabelTaxID1Amount.setText(Integer.toString(amountGeneIDs1));
        jLabelTaxID2Amount.setText(Integer.toString(amountGeneIDs2));
        jLabelTotalInteractionsAmount.setText(Integer.toString(amountOfInteractions));
        jLabelUniqueInteractionsAmount.setText(Integer.toString(uniqueInteractions));

        //Adding the unique interactions to both of the dropdown (combobox) menu's
        for (String i : uniqueList) {
            jComboBox1.addItem(i);
            jComboBox2.addItem(i);
        }

    }//GEN-LAST:event_jButtonOpenActionPerformed
    
    
    private void jButtonExportPubMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportPubMedActionPerformed
        //Try's to export the genes that overlap and contain a PubMed relation
        //Catches NullPointerException and a custom excepion in case the list of overlapping
        //genes is empty.
        try {
            Map<Integer, String> overlapMap = inter.getCalculatingOverlap();
            if (overlapMap.isEmpty()) {
                throw new EmptyGeneListException();
            } else {
                exportList.clear();
                for (int key : overlapMap.keySet()) {
                    if ((geneList.get(key)).getPubMedID() != "") {
                        exportList.add(geneList.get(key));
                    }
                }
                String path = "ExportPubMed.txt";
                ExportingResults exportGenes = new ExportingResults();

                exportGenes.ExportGenes(exportList, input.getHeader(), path);
            }

        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Er zijn geen overlappende genen om te exporteren (met een PubMed relatie)", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        } catch (EmptyGeneListException ex) {
            JOptionPane.showMessageDialog(null, "Er zijn geen overlappende genen om te exporteren (met een PubMed relatie)", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonExportPubMedActionPerformed

    private void jButtonBladerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBladerActionPerformed
        //Opens a filechooser and returns the selected file path.
        FileProcessing fp = new FileProcessing();
        jTextField1.setText(fp.FileChooser());
    }//GEN-LAST:event_jButtonBladerActionPerformed

    private void jButtonAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnalyzeActionPerformed
        //Creating and retrieving two Hashmaps, the two Hashmaps containing 
        //the gene ID's of the selected interactions. 
        String selectedShortPhrase1 = (String) jComboBox1.getSelectedItem();
        fp1.OverlapListBuilder(selectedShortPhrase1, geneList);
        String selectedShortPhrase2 = (String) jComboBox2.getSelectedItem();
        fp2.OverlapListBuilder(selectedShortPhrase2, geneList);
        HashMap OverlapListCombobox1 = fp1.getOverlapListBuilder();
        HashMap OverlapListCombobox2 = fp2.getOverlapListBuilder();
        //The length of the the lists containing the gene ID1's of the selected interactions
        int uniqueSizeTemporary = OverlapListCombobox1.size();
        int uniqueSize2Temporary = OverlapListCombobox2.size();

        //Calculating the overlap between the two HashMaps which contain the selected interactions.
        Map<Integer, String> overlapMap = inter.CalculatingOverlap(OverlapListCombobox1, OverlapListCombobox2);

        //Defining the amount of overlapping genes and the amount of unique genes.
        int maxOverlap = (inter.getCalculatingOverlap()).size();
        int overlapSize1 = inter.getUniqueMap1Size();
        int overlapSize2 = inter.getUniqueMap2Size();
        int unique1Size = (uniqueSizeTemporary) - (overlapSize1);
        int unique2Size = (uniqueSize2Temporary) - (overlapSize2);
       

        //Setting the labels for the Venn diagrams 
        jLabelUniek1.setText(Integer.toString(unique1Size));
        jLabelUniek2.setText(Integer.toString(unique2Size));
        jLabelOverlap.setText(Integer.toString(maxOverlap));

        //Drawing the Venn Diagram.
        Graphics drawPaper = jPanelVenn.getGraphics();
        drawPaper.setColor(Color.RED);
        drawPaper.drawOval(110, 32, 210, 100);
        drawPaper.drawOval(20, 32, 210, 100);

    }//GEN-LAST:event_jButtonAnalyzeActionPerformed

    private void jButtonExportGenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportGenesActionPerformed
        //Try's to export the genes that overlap 
        //Catches NullPointerException and a custom excepion in case the list of overlapping
        //genes is empty.
        try {
            Map<Integer, String> overlapMap = inter.getCalculatingOverlap();
            if (overlapMap.isEmpty()) {
                throw new EmptyGeneListException();
            }
            exportList.clear();
            for (int key : overlapMap.keySet()) {
                exportList.add(geneList.get(key));
            }

            ExportingResults exportGenes = new ExportingResults();
            String path = "ExportTest2.txt";
            exportGenes.ExportGenes(exportList, input.getHeader(), path);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Er zijn geen overlappende genen om te exporteren ", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        } catch (EmptyGeneListException ex) {
            JOptionPane.showMessageDialog(null, "Er zijn geen overlappende genen om te exporteren (met een PubMed relatie)", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonExportGenesActionPerformed

    /**
     * @param args the command line arguments
     */
    //GUI variables
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnalyze;
    private javax.swing.JButton jButtonBlader;
    private javax.swing.JButton jButtonExportGenes;
    private javax.swing.JButton jButtonExportPubMed;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAmountOfInteractions;
    private javax.swing.JLabel jLabelOverlap;
    private javax.swing.JLabel jLabelTaxID1;
    private javax.swing.JLabel jLabelTaxID1Amount;
    private javax.swing.JLabel jLabelTaxID2;
    private javax.swing.JLabel jLabelTaxID2Amount;
    private javax.swing.JLabel jLabelTotalInteractionsAmount;
    private javax.swing.JLabel jLabelUniek1;
    private javax.swing.JLabel jLabelUniek2;
    private javax.swing.JLabel jLabelUniqueInteractions;
    private javax.swing.JLabel jLabelUniqueInteractionsAmount;
    private javax.swing.JPanel jPanelStats;
    private javax.swing.JPanel jPanelVenn;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    //Added variables
    private ArrayList<Gene> geneList = new ArrayList<>();
    private FileProcessing fp1 = new FileProcessing();
    private FileProcessing fp2 = new FileProcessing();
    private Interactions inter = new Interactions();
    private ArrayList<Gene> exportList = new ArrayList<>();
    private FileProcessing input = new FileProcessing();
}
